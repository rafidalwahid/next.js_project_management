generator client {
  provider = "prisma-client-js"
  output   = "../lib/prisma-client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String              @id @default(cuid())
  name                  String?
  email                 String              @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  String              @default("user")
  bio                   String?             @db.Text
  jobTitle              String?
  department            String?
  location              String?
  phone                 String?
  skills                String?             @db.Text
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  lastLogin             DateTime?
  accounts              Account[]
  activities            Activity[]
  attendanceAdjustments Attendance[]        @relation("AttendanceAdjustments")
  attendanceRecords     Attendance[]
  attendanceSettings    AttendanceSettings?
  projects              Project[]

  sessions              Session[]
  tasks                 Task[]              @relation("TaskAssignedTo")
  taskAssignments       TaskAssignee[]
  teams                 TeamMember[]
  userPermissions       UserPermission[]
  userRoles             UserRole[]

  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "account_userId_fkey")
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "session_userId_fkey")
  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  isSystem        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("role")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  category        String?
  isSystem        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@map("permission")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_role")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permission")
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  granted      Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
  @@map("user_permission")
}

model Project {
  id          String              @id @default(cuid())
  title       String
  description String?
  statusId    String              // Primary status (for backward compatibility)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  createdById String
  activities  Activity[]
  attendances Attendance[]
  events      Event[]
  createdBy   User                @relation(fields: [createdById], references: [id])
  status      ProjectStatus       @relation(fields: [statusId], references: [id])
  statuses    ProjectStatusLink[] // Multiple statuses

  tasks       Task[]
  teamMembers TeamMember[]

  @@index([statusId])
  @@index([createdById])
  @@map("project")
}

model ProjectStatus {
  id          String              @id @default(cuid())
  name        String
  color       String?
  description String?
  isDefault   Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  projects    Project[]           // For backward compatibility
  projectLinks ProjectStatusLink[] // Multiple projects

  @@map("project_status")
}

model ProjectStatusLink {
  id          String        @id @default(cuid())
  projectId   String
  statusId    String
  isPrimary   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status      ProjectStatus @relation(fields: [statusId], references: [id], onDelete: Cascade)

  @@unique([projectId, statusId])
  @@index([projectId])
  @@index([statusId])
  @@map("project_status_link")
}

model Task {
  id           String         @id @default(cuid())
  title        String
  description  String?        @db.Text
  priority     String         @default("medium")
  dueDate      DateTime?
  projectId    String
  assignedToId String?
  parentId     String?
  order        Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  completed    Boolean        @default(false)
  activities   Activity[]
  attendances  Attendance[]
  assignedTo   User?          @relation("TaskAssignedTo", fields: [assignedToId], references: [id])
  parent       Task?          @relation("SubTasks", fields: [parentId], references: [id], onDelete: Cascade)
  subtasks     Task[]         @relation("SubTasks")
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignees    TaskAssignee[]

  @@index([projectId])
  @@index([assignedToId])
  @@index([parentId])
  @@map("task")
}

model TaskAssignee {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
  @@map("task_assignee")
}

model TeamMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@index([role])
  @@index([projectId, role])
  @@index([userId, role])
  @@map("team_member")
}



model Event {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  date        DateTime
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([date])
  @@map("event")
}

model Attendance {
  id                   String    @id @default(cuid())
  userId               String
  checkInTime          DateTime  @default(now())
  checkOutTime         DateTime?
  checkInLatitude      Float?
  checkInLongitude     Float?
  checkOutLatitude     Float?
  checkOutLongitude    Float?
  checkInIpAddress     String?
  checkOutIpAddress    String?
  checkInDeviceInfo    String?   @db.Text
  checkOutDeviceInfo   String?   @db.Text
  totalHours           Float?
  notes                String?   @db.Text
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  checkInLocationName  String?   @db.Text
  checkOutLocationName String?   @db.Text
  adjustedById         String?
  adjustmentReason     String?   @db.Text
  projectId            String?
  taskId               String?
  adjustedBy           User?     @relation("AttendanceAdjustments", fields: [adjustedById], references: [id])
  project              Project?  @relation(fields: [projectId], references: [id])
  task                 Task?     @relation(fields: [taskId], references: [id])
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([checkInTime])
  @@index([adjustedById])
  @@map("attendance")
}

model AttendanceSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  workHoursPerDay     Float    @default(8)
  workDays            String   @default("1,2,3,4,5")
  reminderEnabled     Boolean  @default(true)
  reminderTime        String?
  autoCheckoutEnabled Boolean  @default(false)
  autoCheckoutTime    String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attendance_settings")
}

model Activity {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  description String?
  userId      String
  projectId   String?
  taskId      String?
  createdAt   DateTime @default(now())
  project     Project? @relation(fields: [projectId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([createdAt])
  @@index([entityType, entityId])
  @@map("activity")
}
