// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user") // admin, manager, member
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  projects        Project[]
  tasks           Task[]         @relation("TaskAssignedTo") // Renamed to avoid conflicts
  taskAssignments TaskAssignee[] // New relation for tasks assigned to this user
  teams           TeamMember[]
  accounts        Account[]
  sessions        Session[]
  activities      Activity[]
}

// NextAuth models for authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ProjectStatus model for flexible status management
model ProjectStatus {
  id          String   @id @default(cuid())
  name        String   @unique
  color       String   @default("#6E56CF") // Default color for status badges
  description String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects Project[]
}

// Project model
model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  statusId    String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String

  // Relations
  status      ProjectStatus @relation(fields: [statusId], references: [id])
  createdBy   User          @relation(fields: [createdById], references: [id])
  tasks       Task[]
  teamMembers TeamMember[]
  events      Event[]
  resources   Resource[]
  activities  Activity[]
}

// Task model
model Task {
  id           String    @id @default(cuid())
  title        String
  description  String?   @db.Text
  status       String    @default("pending") // pending, in-progress, completed
  priority     String    @default("medium") // low, medium, high
  dueDate      DateTime?
  projectId    String
  assignedToId String? // Keeping for backward compatibility
  parentId     String? // New field for parent task reference
  order        Int       @default(0) // Explicit field for ordering tasks
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  project    Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedTo User?          @relation("TaskAssignedTo", fields: [assignedToId], references: [id])
  activities Activity[]
  assignees  TaskAssignee[] // New relation for multiple assignees

  // Self-relation for parent-child tasks
  parent   Task?  @relation("SubTasks", fields: [parentId], references: [id], onDelete: Cascade)
  subtasks Task[] @relation("SubTasks")
}

// TaskAssignee model for many-to-many relationship between tasks and users
model TaskAssignee {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  role      String? // Optional role for the assignee (e.g., "responsible", "reviewer", etc.)
  createdAt DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId]) // Prevent duplicate assignments
}

// Team Member model (for project-specific roles)
model TeamMember {
  id        String   @id @default(cuid())
  role      String // owner, admin, member
  userId    String
  projectId String
  joinedAt  DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

// Resource model
model Resource {
  id           String   @id @default(cuid())
  name         String
  type         String // hardware, software, human, etc.
  quantity     Int      @default(1)
  projectId    String
  assignedToId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Event model
model Event {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  date        DateTime
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Activity log for tracking actions
model Activity {
  id          String   @id @default(cuid())
  action      String // created, updated, deleted, assigned, etc.
  entityType  String // project, task, resource, etc.
  entityId    String
  description String?
  userId      String
  projectId   String?
  taskId      String?
  createdAt   DateTime @default(now())

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)
}
